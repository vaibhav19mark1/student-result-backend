#!/usr/bin/env node

/**
 * Module dependencies.
 */
 const express=require("express"); 
 var app = require("../app");
 var debug = require("debug");
 var http = require("http");
 const { sequelize } = require("./connection");
 const config = require("./config");
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || "3001");
 app.set("port", port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
 
 // connect to sql db
 (async function () {
   try {
     await sequelize.authenticate();
     console.log("Db Connection has been established successfully.");
   } catch (error) {
     console.error("Unable to connect to the database:", error);
   }
   if (config.server.env !== "production") {
     try {
       await sequelize.sync({ force: true });
     } catch (err) {
       console.error(err);
     }
     console.log("All models were synchronized successfully.");
   }
 })();
 
 // handle server shutdown event
 process.on("SIGINT", async (code) => {
   console.log("received exit event");
   try {
     await sequelize.close();
     console.log("closing db connections");
   } catch (err) {
     console.error("unable to close db connection");
   }
   process.exit();
 });
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 server.listen(port);
 server.on("error", onError);
 server.on("listening", onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== "listen") {
     throw error;
   }
 
   var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case "EACCES":
       console.error(bind + " requires elevated privileges");
       process.exit(1);
       break;
     case "EADDRINUSE":
       console.error(bind + " is already in use");
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
   debug("Listening on " + bind);
 }